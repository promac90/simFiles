DEBUT(PAR_LOT='NON')

meshL = LIRE_MAILLAGE(FORMAT='IDEAS', UNITE=20)
mesh = DEFI_GROUP(
    reuse=meshL,
 CREA_GROUP_NO=_F(GROUP_MA=('all', ), NOM=('nodes', )),   
MAILLAGE=meshL
);
mesh = CREA_MAILLAGE(LINE_QUAD=_F(TOUT='OUI'), MAILLAGE=meshL)


model = AFFE_MODELE(
    AFFE=_F(MODELISATION=('3D', ), PHENOMENE='MECANIQUE', TOUT='OUI'),
    MAILLAGE=mesh
)

mater = DEFI_MATERIAU(ELAS=_F(E=2.1e+8, NU=0.28))

fieldmat = AFFE_MATERIAU(
    AFFE=_F(GROUP_MA=('v', ), MATER=(mater, )), MODELE=model
)

load = AFFE_CHAR_MECA( 
    DDL_IMPO=_F(DX=0.0, DY=0.0, DZ=0.0, GROUP_MA=('s4' )), 
    MODELE=model, 
    PRES_REP=_F(GROUP_MA=('s2'), PRES=-0.010000000000000002) 
)

reslin = MECA_STATIQUE(
    CHAM_MATER=fieldmat,
    EXCIT=_F(CHARGE=load),
    MODELE=model,
     
    SOLVEUR=_F(
        METHODE='MUMPS',
        RESI_RELA=1e-04
    )
)
t2 = POST_RELEVE_T(
  ACTION=_F(
    GROUP_NO=('nodes', ), 
    INTITULE='depl', 
    NOM_CHAM='DEPL',
    NOM_CMP=('DX','DY','DZ', ), 
    OPERATION=('EXTRACTION', ), 
    RESULTAT=reslin
  )
)
reslin = CALC_CHAMP(
    reuse=reslin,
    CONTRAINTE=('SIEF_ELNO'),
    CRITERES=('SIEQ_ELNO'),
   
    RESULTAT=reslin
)



t = POST_RELEVE_T(
  ACTION=_F(
    GROUP_NO=('nodes', ), 
    INTITULE='prprp', 
    NOM_CHAM=('SIEQ_ELNO',),
    NOM_CMP=('VMIS', ), 
    OPERATION=('EXTRACTION', ), 
    RESULTAT=reslin
  )
)




t1 = t.EXTR_TABLE()
t3 = t2.EXTR_TABLE()

data_dict = {t1.NOEUD[i]: ( t1.VMIS[i], t3.DX[i], t3.DY[i], t3.DZ[i]) for i in range(len(t1.NOEUD))}

# Define lists to hold the data
val1_values = []

maxDisp=abs(max(max(t3.DX, key=abs), max(t3.DY, key=abs), max(t3.DZ, key=abs) , key=abs))
maxStress = max(t1.VMIS)
# Open the file and read the data
sortedStress= []
sortedDx = []
sortedDy = []
sortedDz = []
with open('/home/promac90/Desktop/simScaleAPI/asterFiles/order.txt', 'r') as file:
    for line in file:        
        key = line.strip()  # assuming the key is an integer
        if key in data_dict:
            item = data_dict[key]
            sortedStress.append(round(511*item[0]/maxStress))
            sortedDx.append(round(511*item[1]/maxDisp))
            sortedDy.append(round(511*item[2]/maxDisp))
            sortedDz.append(round(511*item[3]/maxDisp))
        else:
            print('not found in data_dict!')


# Create list of dictionaries
result = [
     
    {'stress': sortedStress},
    {'DX': sortedDx},
    {'DY': sortedDy},
    {'DZ': sortedDz},
    {'max': maxStress}
]



# Convert the result to a string representation
result_str = str(result).replace("'", '"')

# Save to a file
with open('/home/promac90/Desktop/simScaleAPI/asterFiles/result.txt', 'w') as outfile:
    outfile.write(result_str)



FIN()